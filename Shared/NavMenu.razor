@inject StateContainer stateContainer
@inject Repository repository
@inject NavigationManager navigationManager

<sidebar>
    <div class="navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="">Sailing Score Service</a>
            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>

        </div>
    </div>
    <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
        <nav class="flex-column">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <i class="fa-solid fa-clipboard-list mx-2"></i>Season
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="boats">
                    <i class="fa-solid fa-sailboat mx-2" aria-hidden="true"></i> Boats
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="raceStarts"
                @onclick="ToggleRaceMenu">
                    <i class="fa-solid fa-flag-checkered mx-2"></i> Sailing Race Starts
                </NavLink>
                <div class="@RaceMenuCssClass px-3">
                    @foreach (var item in racelinks)
                    {
                        <div class="nav-item">
                            <NavLink class="nav-link" href="@item.Url">
                                <i class="fa-solid fa-flag-checkered mx-2" aria-hidden="true"></i> @item.Label
                            </NavLink>
                        </div>
                    }
                </div>

            </div>
        </nav>
        <div>
            @if (stateContainer.IsLogin)
            {
                <button class="btn btn-primary ms-3 col-10" @onclick="Logout">
                    @stateContainer.CurrentUser.Username
                    <i class="fa-solid fa-arrow-right-from-bracket ms-1"></i>
                </button>
            }
            else
            {
                <div class="m-3">
                    <label class="form-label text-white">UserName</label>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control col-10" 
                            @onfocusin="PreventToggle"
                            @onfocusout="PreventToggle"
                            @onkeyup="Enter" @bind="username">
                        <button type="button" class="btn btn-primary" @onclick="Login">
                            <i class="fa-solid fa-arrow-right-to-bracket "></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

</sidebar>

@code {
    private string username { get; set; } = string.Empty;
    private List<Race> races { get; set; } = new();
    private List<RaceLinks> racelinks { get; set; } = new();

    private bool collapseNavMenu = false;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private void ToggleNavMenu()
    {
        if (preventToggleMenu) return;
        collapseNavMenu = !collapseNavMenu;
    }
    private bool collapseRaceMenu = false;
    private string? RaceMenuCssClass => collapseRaceMenu ? "" : "d-none";

    private void ToggleRaceMenu()
    {
        ToggleNavMenu();
        collapseRaceMenu = !collapseRaceMenu;
    }
    private bool preventToggleMenu = false;

    private void PreventToggle()
    {
        preventToggleMenu = !preventToggleMenu;
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Login();
        }
    }

    private void navigateRace(int race)
    {
        stateContainer.SelectedRace = race;
        navigationManager.NavigateTo("/RaceResult/" + race.ToString());
    }

    private async Task Login()
    {
        User user = await repository.GetUserAsync(username) ?? new();
        user = await repository.SaveUserAsync(user);
        stateContainer.SetCurrentUser(user);
        navigationManager.NavigateTo("/");
    }
    private void Logout()
    {
        stateContainer.SetCurrentUser(new());
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var temp = await repository.GetRacesAsync();
            races = temp
            .Where(x => x.StartTime < DateTime.Today.AddDays(6))
            .ToList() ?? new();
            racelinks = new();
            foreach (var item in races)
            {
                racelinks.Add(new()
                    {
                        Url = "RaceResult/" + item.Id.ToString(),
                        Label = item.Name
                    });
            }
            StateHasChanged();
        }
    }
    private class RaceLinks
    {
        public string Url { get; set; }
        public string Label { get; set; }
    }

}
