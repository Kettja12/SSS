@inject StateContainer stateContainer
@inject Repository repository
<h3>Start 1</h3>
<table class="table">
    <thead>
        <tr>
            <th>Position</th>
            <th>Name</th>
            <th>Type</th>
            <th>Sailnumber</th>
            <th>Skipper</th>
            <th>Finnrating</th>
            <th>StartTime</th>
            <th>EndTime</th>
            <th>SailTime</th>
            <th>Fixed Time</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in resultList)
        {
            <tr>
                <td>@item.Position</td>
                <td>@item.Name</td>
                <td>@item.Type</td>
                <td>@item.SailNumber</td>
                <td>@item.Skipper</td>
                <td>@item.Finnrating.ToString("0.0000")</td>
                <td>@item.StartTime</td>
                <td>@item.EndTime</td>
                <td>@item.SailTime</td>
                <td>@item.FixedTime</td>
            </tr>
        }

    </tbody>
</table>
@if (resultList2.Any())
{

    <h3>Start 2</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Place</th>
                <th>Name</th>
                <th>Type</th>
                <th>Sailnumber</th>
                <th>Skipper</th>
                <th>Finnrating</th>
                <th>StartTime</th>
                <th>EndTime</th>
                <th>SailTime</th>
                <th>Fixed Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in resultList2)
            {
                <tr>
                    <td>@item.Position</td>
                    <td>@item.Name</td>
                    <td>@item.Type</td>
                    <td>@item.SailNumber</td>
                    <td>@item.Skipper</td>
                    <td>@item.Finnrating.ToString("0.0000")</td>
                    <td>@item.StartTime</td>
                    @if (item.DNF)
                    {
                        <td>DNF</td>
                    }
                    else
                    {
                        <td>@item.EndTime</td>
                        <td>@item.SailTime</td>
                        <td>@item.FixedTime</td>
                    }
                </tr>
            }

        </tbody>
    </table>

    <table class="table">
        <thead>
            <tr>
                <th>Place</th>
                <th>Name</th>
                <th>Race 1</th>
                <th>Race 2</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in summary)
            {
                <tr>
                    <td>@item.Position</td>
                    <td>@item.BoatName</td>
                    <td>@item.Race1</td>
                    <td>@item.Race2</td>
                    <td>@item.Summary</td>
                </tr>
            }

        </tbody>
    </table>
}

@code {
    [Parameter]
    public int Id { get; set; } = 0;
    [Parameter]
    public bool DoSearch { get; set; } = true;
    [Parameter]
    public bool Category { get; set; } = false;

    private Race race { get; set; } = new();
    private List<ResultItem> resultList { get; set; } = new();
    private List<ResultItem> resultList2 { get; set; } = new();
    private List<SummaryItem> summary { get; set; } = new();
    protected override async Task OnParametersSetAsync()
    {
        if (DoSearch)
        {
            DoSearch = false;
            race = await repository.GetRaceAsync(Id);
            var results = await repository.GetResultsAsync(Id);
            var boats = await repository.GetBoatsAsync();
            if (Category)
            {
                boats = boats.Where(x => x.Finnrating < 0.9).ToList();
            }
            else
            {
                boats = boats.Where(x => x.Finnrating > 0.9).ToList();
            }
            if (boats.Any() == false) return;
            resultList = new();
            foreach (var item in results)
            {
                var boat = boats.FirstOrDefault(x => x.Id == item.BoatId) ?? new();
                if (boat.Id == 0) continue;
                ResultItem row = CalculateRow(race,item, boat);
                resultList.Add(row);
            }
            resultList = resultList.OrderBy(x => x.DNF).ThenBy(x => x.FixedTime).ToList();
            int index = 1;
            results = await repository.GetResultsAsync(Id);
            foreach (var item in resultList)
            {
                if (item.Position != index)
                {
                    Result result = results.First(x => x.Id == item.Id);
                    result.PositionRace1 = index;
                    result.Position = index;
                    await repository.SaveResultAsync(result);
                }
                item.Position = index;
                index++;
            }
            resultList2 = new();
            if (race.Name.StartsWith("Tiistaipurjehdus") == false) return;
            results = await repository.GetResultsAsync(Id);
            foreach (var item in results)
            {
                var boat = boats.FirstOrDefault(x => x.Id == item.BoatId) ?? new();
                if (boat.Id == 0) continue;
                ResultItem row = CalculateRow2(item, boat);
                resultList2.Add(row);
            }
            resultList2 = resultList2.OrderBy(x => x.DNF).ThenBy(x => x.FixedTime).ToList();

            index = 1;
            results = await repository.GetResultsAsync(Id);
            foreach (var item in resultList2)
            {
                if (item.Position != index)
                {
                    Result result = results.First(x => x.Id == item.Id);
                    result.PositionRace2 = index;
                    await repository.SaveResultAsync(result);
                }
                item.Position = index;
                index++;
            }
            summary = new();
            var boatcount1Race = resultList.Where(x => x.DNS == false).Count();
            var boatcount2Race = resultList2.Where(x => x.DNS == false).Count();
            foreach (var item in boats)
            {
                var firstresult = resultList.Where(x => x.BoatId == item.Id).FirstOrDefault();
                var nextresult = resultList2.Where(x => x.BoatId == item.Id).FirstOrDefault();
                if (firstresult == null || nextresult == null) continue;
                SummaryItem summaryItem = new()
                    {
                        BoatId = item.Id,
                        BoatName = item.Name
                    };
                if (firstresult != null)
                {
                    summaryItem.Race1 = firstresult.Position;
                    if (firstresult.DNS)
                    {
                        summaryItem.Race1 = boatcount1Race + 2;
                    }
                    if (firstresult.DNF)
                    {
                        summaryItem.Race1 = boatcount1Race + 1;
                    }
                }
                else
                {
                    summaryItem.Race1 = boatcount1Race + 2;
                }
                if (nextresult != null)
                {
                    summaryItem.Race2 = nextresult.Position;
                    if (nextresult.DNS)
                    {
                        summaryItem.Race2 = boatcount2Race + 2;
                    }
                    if (nextresult.DNF)
                    {
                        summaryItem.Race2 = boatcount2Race + 1;
                    }
                }
                else
                {
                    summaryItem.Race2 = boatcount2Race + 2;
                }
                summary.Add(summaryItem);
            }
            summary = summary.OrderBy(x => x.Summary).ThenBy(x => x.Race2).ToList();
            index = 1;
            foreach (var item in summary)
            {
                item.Position = index;
                var result = results.Where(x => x.BoatId == item.BoatId).First();
                if (result.Position != index)
                {
                    result.Position = index;
                    await repository.SaveResultAsync(result);
                }
                index++;
            }
        }
    }

    private ResultItem CalculateRow(Race race,Result item, Boat boat)
    {
        var newrow = new ResultItem()
            {
                Id = item.Id,
                BoatId = boat.Id,
                Position = item.PositionRace1,
                Name = boat.Name,
                Type = boat.Type,
                Skipper = boat.Skipper,
                SailNumber = boat.SailNumber,
                Finnrating = boat.Finnrating
            };
        if (boat.Finnrating > 0.9)
        {
            newrow.StartTime  = race.StartTime!.Value.TimeOfDay;
        }
        else
        {
            newrow.StartTime = race.StartTime2!.Value.TimeOfDay;
  
        }
        if (item.FirstEndTime != null)
        {
            newrow.EndTime = item.FirstEndTime.Value.TimeOfDay;
            newrow.SailTime = newrow.EndTime - newrow.StartTime;
            int seconds = (int)(newrow.SailTime.Value.TotalSeconds * boat.Finnrating);
            newrow.FixedTime = TimeSpan.FromSeconds(seconds);
        }
        else
        {
            newrow.DNF = true;
        }
        return newrow;
    }
    private ResultItem CalculateRow2(Result item, Boat boat)
    {
        var newrow = new ResultItem()
            {
                Id = item.Id,
                BoatId = boat.Id,
                Position = item.PositionRace2,
                Name = boat.Name,
                Type = boat.Type,
                Skipper = boat.Skipper,
                SailNumber = boat.SailNumber,
                Finnrating = boat.Finnrating
            };
        if (item.FirstEndTime != null)
        {
            newrow.StartTime = item.FirstEndTime.Value.TimeOfDay;
            if (item.SecondEndTime != null && item.FirstEndTime != null)
            {
                newrow.EndTime = item.SecondEndTime.Value.TimeOfDay;
                newrow.SailTime = newrow.EndTime - newrow.StartTime;
                int seconds = (int)(newrow.SailTime.Value.TotalSeconds * boat.Finnrating);
                newrow.FixedTime = TimeSpan.FromSeconds(seconds);
            }
            else
            {
                newrow.DNF = true;
            }
        }
        else
        {
            newrow.DNS = true;

        }

        return newrow;
    }

    public class ResultItem
    {
        public int Id { get; set; }
        public int BoatId { get; set; }
        public int Position { get; set; }
        public string Name { get; set; }
        public string Type { get; set; }
        public string Skipper { get; set; }
        public string SailNumber { get; set; }
        public Double Finnrating { get; set; }
        public TimeSpan? StartTime { get; set; }
        public TimeSpan? EndTime { get; set; }
        public TimeSpan? SailTime { get; set; }
        public TimeSpan? FixedTime { get; set; }
        public Boolean DNF { get; set; }
        public Boolean DNS { get; set; }
    }
    public class SummaryItem
    {
        public int Position { get; set; }
        public int BoatId { get; set; }
        public string BoatName { get; set; }
        public int Race1 { get; set; }
        public int Race2 { get; set; }
        public int Summary { get { return Race1 + Race2; } }
    }
}
